Dynamic Programming

int solve(int []coins, int sum, int n){
	if(sum == 0)
		return 1;
	if(n == 0)
		return 0;
	
	if(coins[n-1] <= sum){
		return solve(coins, sum - coins[n-1], n) + solve(coins, sum, n-1);
	} else{
		return solve(coins, sum, n-1);
	}
}

int solve_dp(int []coins, int sum, int n){
	
	int [][]dp = new int[n+1][sum+1];
	dp[0][0] = 1;

	for(int i = 1; i<=n; i++){
		for(int j = 0; j<=sum; j++){
			if(j == 0)
				dp[i][j] = 1;
			else{
				if(coins[i-1] <= j)
					dp[i][j] = dp[i][j-coins[i-1]] + dp[i-1][j];
				else
					dp[i][j] = dp[i-1][j];
			}
		}
	}
	return dp[n][sum];

}