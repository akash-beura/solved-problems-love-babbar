Q1) 0/1 Knapsack

int solve(int []wt, int[]value, int capacity, int n){
	if(n == 0 || capacity == 0)
		return 0;
	
	if(wt[n-1] <= capacity){
		return Math.max(value[n-1]+solve(wt, value, capacity - wt[n-1], n-1), solve(wt, value, capacity, n-1));
	} else{
		return solve(wt, value, capacity, n-1);
	}
}

int solve_dp(int []wt, int[]value, int capacity, int n){
	
	int [][]dp = new int[n+1][capacity+1];
	for(int i = 0; i<=n; i++){
		for(int j = 0; j<=capacity; j++){
			if(i == 0 || j==0)
				dp[i][j] = 0;
	}
	
	for(int i = 1; i<=n; i++){
		for(int j = 1; j<=capacity; j++){
			if(wt[i-1] <= j){
				dp[i][j] = value[i-1] + Math.max(dp[i-1][j-wt[i-1]], dp[i-1][j]);
			} else{
				dp[i][j] = dp[i-1][j];
			}
		}
	}
	return dp[n][capacity];
} 


======================================================================
Q2. Subset Sum problem


boolean solve(int []ar, int sum, int n){
	if(n == 0 & sum == 0)
		return true;
	if(n ==0)
		return false;
	if(sum == 0)
		return true;
		
	if(ar[n-1] <= sum){
		return solve(ar, sum-ar[n-1], n-1) || solve(ar, sum, n-1);
	else
		return solve(ar, sum, n-1);
	}


}

boolean solve_dp_subset_sum(int []ar, int sum, int n){
	boolean dp[][] = new boolean[n+1][sum+1];
	for(int i = 0; i<=n; i++){
		dp[i][0] = true;
	}
	for(int i = 1; i<=n; i++){
		for(int j = 1; j<=sum; j++){
			if(ar[i-1] <= j)
				dp[i][j] = dp[i-1][j-ar[i-1]] || dp[i-1][j];
			else 
				dp[i][j] = dp[i-1][j];
		}
	}
	return dp[n][sum];
}

======================================================================

Q3) Equal sum partition

	int solveESP(int []ar, int sum, int n){
		if(sum == 0)
			return true;
		if(n ==0)
			return false;
					
		if(ar[n-1] <= sum){
			return solve(ar, sum-ar[n-1], n-1) || solve(ar, sum, n-1);
		else
			return solve(ar, sum, n-1);
		}
	}
	
	boolean solveESPHelper(int []ar, int sum, int n){
			
			int sum = 0;
			for(int i = 0; i<n; i++){
				sum+=ar[i];
			}
			
			if(sum%2 != 0)
				return false;
			return solve_dp_subset_sum(ar, sum/2, n);
	}
	
	
======================================================================

Q4) Count the total no. of subsets with the sum

int solve(int ar[], int sum, int n){
		if(sum == 0)
			return 1;
		else if(n == 0) 
			return 0;
		
		
		if(ar[n-1] <= sum){
			return solve(ar, sum - ar[n-1], n-1) + solve(ar, sum, n-1);
		}
		return solve(ar, sum, n-1);
}

======================================================================

Q5) Unbounded Knapsack

int recursionUK(int []wt, int []val, int capacity, int n){
	if(n == 0 || capacity == 0)
		return 0;
	
	if(wt[n-1] <= capacity){
	
		return Math.max(val[n-1] + recursionUK(wt, val, capacity - wt[n-1], n), recursionUK(wt,val, capacity, n-1));
	}
	return recursionUK(wt, val, capacity, n-1);
}

int dpUK(int []wt, int []val, int capacity, int n){
	int [][]dp = new int[n+1][capacity+1];
	
	for(int i = 1; i<=n; i++){
		for(int j = 1; j<=capacity; j++){
			if(wt[i-1] <= j){
				dp[i][j] = val[i-1] + Math.max(dp[i][j - wt[i-1]], dp[i-1][j]);
			} else{
				dp[i][j] = dp[i-1][j];
			}
		}
	}
	return dp[n][capacity];
}

======================================================================

Q6) Rod cutting problem

	recursionRodCutting(int []length, int[]price, int capacity, int n){
		if(n == 0 || capacity == 0)
			return 0;
			
		if(length[n-1] <= capacity){
			return Math.max(price[n-1] + recursionRodCutting(length, price, capacity - length[n-1], n), recursionRodCutting(length, price, capacity, n-1));
		}
		return recursionRodCutting(length, price, capacity, n-1);
	}
	
	int dpRodCutting(int []length, int[]price, int capacity, int n){
		int [][]dp = new int[n+1][capacity+1];
	
		for(int i = 1; i<=n; i++){
			for(int j = 1; j<=capacity; j++){
				if(length[i-1] <= j){
					dp[i][j] = price[i-1] + Math.max(dp[i][j - length[i-1]], dp[i-1][j]);
				} else{
					dp[i][j] = dp[i-1][j];
				}
			}
		}
		return dp[n][capacity];
	}
	
======================================================================

Q7) Coin change problem

int recursionCC(int []coins, int sum, int n){
	if(sum == 0)
		return 1;
	if(n == 0)
		return 0;
	
	if(coins[n-1] <= sum){
		return recursionCC(coins, sum-coins[n-1], n) + recursionCC(coins, sum, n-1);
	} else{
		return recursionCC(coins, sum, n-1);
	}
}




	


