1. Reverse the Arrat

void solve(int []ar, int n){
	for(int i=0, j=n-1; i<j; i++,j--){
		int temp = ar[i];
		ar[i] = ar[j];
		ar[j] = temp;
	}
}


------------------------------------------------------------------
2. Find min and max

void solve(int []ar, int n){
	if(n==0) return;
	if(n==1) System.out.println(ar[0],ar[0]);
	
	int min = Integer.MAX_VALUE;
	int max = Integer.MIN_VALUE;
	
	for(int i = 0; i<n; i++){
		max = Math.max(ar[i], max);
		min = Math.min(ar[i], min);
	}
	
	sout(min, max);
}

------------------------------------------------------------------
3. 
int findKthMax(int []ar, int n, int k){
	PriorityQueue<Integer> pq = new PriorityQueue((a,b)->b-a);
	for(int i = 0; i<n; i++){
		pq.add(ar[i]);
	}
	
	while(k!=1){
		pq.poll();
	}
	return pq.poll();
}

int findKthMin(int []ar, int n, int k){
		PriorityQueue<Integer> pq = new PriorityQueue();
		for(int i = 0; i<n; i++){
			pq.add(ar[i]);
		}
		
		while(k!=1){
			pq.poll();
		}
		return pq.poll();
}
	
------------------------------------------------------------------

4. Sort an Array of 0,1,2 without sorting algo

	void sort(int []ar, int n){
		int left = 0;
		int right = n-1;
		int i = 0;
		while(min<right){
			if(ar[i] == 0){
				swap(ar[i], ar[left]);
				left++;
				i++;
			} else if(ar[i] == 1)
				i++;
			} else{
				swap(ar[i], ar[right]);
				right--;
			}
		}
	}
	
------------------------------------------------------------------
5. Move all negative elements to left side

void solve(int []ar, int n){
	int left = 0;
	for(int i = 0; i<n; i++){
		if(ar[i]<0){
			swap(ar[i], ar[left]);
			left++;
		}
	}
;

------------------------------------------------------------------
6. Find Union and Intersection

// 1 2 3 4 5
// 1,2,6,7

Union: 1,2,3,4,5,6,7
Intersection: 1,2


List<Integer> findUnion(int []a, int[]b, int m, int n){

	int i = 0, j = 0;
	List<Integer> result = new ArrayList<>();
	while(i<m && j<n){
		if(a[i] == b[j]){
				result.add(a[i++]);
				j++;
		} else if(a[i]<b[j]){
			result.add(a[i++]);
		} else{
			result.add(b[j++]);
		}
	}
	
	while(i<m){
		result.add(a[i++]);
	}
	
	while(j<n){
		result.add(b[j++]);
	}
	return result;
}


List<Integer> findIntersection(int []a, int[]b, int m, int n){

	int i = 0, j = 0;
	List<Integer> result = new ArrayList<>();
	while(i<m && j<n){
		if(a[i] == b[j]){
				result.add(a[i++]);
				j++;
		} else if(a[i]<b[j]){
			i++;
		} else{
			j++;
		}
	}
	return result;
}


------------------------------------------------------------------

7. Cyclically rotate array one by one

void rotate(int []ar, int n){
	int temp = ar[n-1];
	for(int i = n-1; i>=1; i--){
		ar[i] = ar[i-1];
	}
	ar[0] = temp;
}


------------------------------------------------------------------
8. Find largest sum contiguous arrays:
	
	int findSum(int []ar, int n){
		if(n == 0) return 0;
		if (n==1) return ar[0];
		
		int currentMax = ar[0];
		int max = ar[0];
		
		for(int i = 1; i<n; i++){
			currentMax = Math.max(ar[i], currentMax+ar[i]);
			max = Math.max(currentMax, max);
		}
		return max;
	}

------------------------------------------------------------------

10. Min no. of jumps to reach the end

	int solve(int []ar, int n){
		int []jumps = new int[n];
		for(int i = 1; i<n; i++){
			jumps[i] = Integer.MAX_VALUE;
		}
		
		for(int i = 1; i<n; i++){
			for(int j = 0; j<i; j++){
				if(ar[j] + j >= i){
					jumps[i] = Math.min(jumps[i], jumps[j]+1);
				}
			}
		}
		
		return jumps[n-1] == Integer.MAX_VALUE ? -1 : jumps[n-1];
	}


------------------------------------------------------------------

11. Find duplicate in N+1 integers

void solve(int[] ar, int n){
	
	int []temp = Arrays.copyOf(ar);
	for(int i = 0; i<n; i++){
		ar[ar[i]%n]+=n;
	}
	
	for(int i = 0; i<n; i++){
		if(temp[i]/n > 1){
			sout(ar[i]);
		}
	}
}
------------------------------------------------------------------
12. Merge 2 sorted arrays without extra space

void merge(int []a, int []b, int m, int n){
	
	while(a[m-1] > b[0]){
		swap(ar[m-1], b[0]);
		Arrays.sort(a);
		Arrays.sort(b);
	}
}


------------------------------------------------------------------
14. Merge Intervals

int [][]mergeIntervals(int [][]intervals, int n){
	Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
	List<int[]> result = new ArrayList<>();
	int []current = intervals[0];
	result.add(current);
	
	for(int []interval: intervals){
		int current_end = current[1];
		int next_beg = interval[0];
		int next_end = interval[1];
		
		if(next_beg <= current_end){
			current[1] = Math.max(current_end, next_end);
		} else{
			current = interval;
			result.add(current);
		}
		
	}
	
	return result.toArray(new int[result.size()][]);
}


------------------------------------------------------------------
15. 
void nextPermutation(int []ar, int n){
	// 1 2 3 4 5 6
	
	int index1 = -1;
	int index2 = -1;
	
	for(int i = n-2; i>=0; i--){
		if(ar[i] < ar[i+1]){
			index1 = i;
			break;
		}
	}
	
	for(int i = n-1; i>index1; i++){
		if(ar[i] > ar[index1]){
			index2 = i;
			break;
		}
	}
	
	swap(ar[index1], ar[index2]); // 1 2 3 4 6 5
	
	
	for(int i = index1+1, j=n-1; i<j; i++, j--){
		swap(a[i], a[j]);
	}
	
	for(int i = 0; i<n; i++){
		sop(ar[i]);
	}
}

------------------------------------------------------------------
16. Best Time to Buy and sell stock..

int solve(int []stocks, int n){
	int profit = 0;
	int min = stocks[0];
	
	for(int i = 1; i<n; i++){
		if(stocks[i] < min){
			min = stocks[i];
		} else {
			profit = Math.max(profit, ar[i] - min);
		}
	}
	return profit;
}

------------------------------------------------------------------
18. Find common in 3 sorted arrays


int[] solve(int []a, int []b, int []c){
	int i=0, j=0, k=0;
	
	List<Integer> result = new ArrayList();
	while(i<a.length && j<b.length && k<c.length){
		if(a[i] == b[j] && b[j] == c[k]){
			result.add(a[i]);
			i++;
			j++;
			k++;
		} else if(a[i] < b[j]){
			i++;
		} else if([b[j] < c[k]){
			j++;
		} else{
			k++;
		}
	}
	
	return result.stream().mapToInt(a->a);
}

------------------------------------------------------------------


19. Find all pairs on integer array whose sum is equal to the given number

	int [][] solve(int[]ar, int n, int target){
		Map<Integer, Integer> sumIndex = new HashMap<>();
		Set<Integer> seen = new HashSet<>();
		List<int []> result = new ArrayList<>();
		for(int i = 0; i<n; i++){
			if(sumIndex.containsKey(target - ar[i]) && !seen.contains(ar[i])){
				int []temp = new int[0];
				temp[0] = ar[sumIndex.get(target-ar[i])];
				temp[1] = ar[i];
				result.add(temp);
				seen.add(ar[i]);
				seen.add(target-a[i]);
			} else{
				sumIndex.add(a[i], i);
			}
		}
		return result.toArray(new int[result.size()][]);
	}

------------------------------------------------------------------

20. Find Sub, aray with 0 sum

int []solve(int []ar, int n){
	Map<Integer, Integer> sumIndex = new HashMap<>();
	int sum=0;
	
	for(int i = 0; i<=n; i++){
		Integer oldIndex = map.get(sum);
		if(i==n && oldIndex == null){
			return null;
		} else if(oldIndex == null){
			map.add(sum, i);
			sum+=a[i];
		} else{
			return Arrays.copyOfRange(arr, 0, i);
		}
	}
	return null;
}


------------------------------------------------------------------
21. Find max product subarray

int maxProduct(int []ar, int n){
	int currentProduct = 1;
	int max = 0;
	
	for(int i = 0; i<n; i++){
		currentProduct = currentProduct*ar[i];
		max = Math.max(currentProduct, max);
		if(currentProduct == 0)
			currentProduct = 1;
	}
	
	currentProduct = 1;
	
	for(int i = n-1; i>=0; i--){
		currentProduct = currentProduct*ar[i];
		max = Math.max(currentProduct, max);
		if(currentProduct == 0)
			currentProduct = 1;
	}
	
	return max;
}

	
------------------------------------------------------------------
22. Find longest coinsecutive subsequence

int findLCS(int []ar, int n){
	
	Set<Integer> numbers = new HashSet<>();
	for(int num: ar){
		numbers.add(num);
	}
	int max = 1;
	
	
	for(int num: ar){
		int streak = 1;
		int temp = num;
		
		if(!numbers.contains(temp-1)){
			while(numbers.contains(temp+1)){
				streak+=1;
				temp+=1;
			}
		}
		max = Math.max(streak, max);
	}
	return max;
}

		
------------------------------------------------------------------
25. Check if array subset of another array

boolean check(int ar[], int subset[], int m, int n){

	int i = 0;
	int j = 0;
	Arrays.sort(ar);
	Arrays.sort(subset);
	
	while(i<m && j<n){
		if(ar[i] == subset[j]){
			i++;
			j++;
		} else if(ar[i]<subset[j])
			i++;
		} else if(ar[i] > subset[j]){
			return false;
		}
		
		if(j == n)
			return true;
		if(i == m)
			return false;
	}
	return false;
}

------------------------------------------------------------------
26. Find if triplet sum exists..

boolean checkIfTripletExists(int []ar, int n, int target){
	
	for(int i = 0; i<n-2; i++){
		int left = i;
		int right = n-1;
		while(i<j){
			sum = ar[i] + ar[left] + ar[right];
			if(sum == target)
				return true;
			else if(sum>target)
				j--;
			else
				i++;
		
		}
	}
	return false;
}

------------------------------------------------------------------
27. Trapping Rainwater Problem:

int findWaterCount(int []ar, int n){

	int maxIndex = 0;
	int max = 0;
	for(int i = 0; i<n; i++){
		if(ar[i] > max){
			max = ar[i];
			maxIndex = i;
		}
	}

	int water = 0;
	int maxLeft = a[0];
	for(int i = 1; i<maxIndex; i++){
		if(ar[i] > maxLeft){
			maxLeft = ar[i];
		} else {
			water = water + maxLeft - ar[i];
		}
	}

	int maxRight = ar[n-1];
	for(int i = n-2; i>maxIndex; i--){
		if(ar[i] > maxRight){
			maxRight = ar[i];
		} else {
			water = water + maxRight - ar[i];
		}
	}
	return water;
}


------------------------------------------------------------------
28. Chocolate Distribution problem

int solve(int []bags, int n, int m){

	int minResult = Integer.MAX_VALUE;
	Arrays.sort(bags);
	
	for(int i = 0; (i+m-1)<n; i++){
		minResult = Math.min(minResult, bags[i+m-1] - bags[i]);
	}
	return minResult;
}

------------------------------------------------------------------
29. Smallest Subarray with sum greater than a given value

int solve(int []ar, int sum){

	int left = 0;
	int min = Integer.MAX_VALUE;
	int tempSum = 0;
	
	for(int i = 0; i<n; i++){
		tempSum += ar[i];
		while(tempSum > = sum){
			min = Math.min(min, i-left+1);
			tempSum-=ar[left++];
		}
	}
	
	return min;	
}

------------------------------------------------------------------
30. Minimum no. of operations required to make an array palindrome

int solve(int ar[], int n){
	if(n<=1)
		return 1;
	int i = 0;
	int j = n-1;
	int count = 0;
	
	while(i<j){
		if(ar[i] == ar[j]){
			i++;
			j--;
		} else if(ar[i]<ar[j]){
			ar[i+1] = ar[i+1] + ar[i];
			i++;
			count++;
		} else{
			ar[j-1] = ar[j-1] + ar[j];
			j--;
			count++;
		}
	}
	
	return count;


}

	
			

			
		
		
		
	
	
	
	
	
	
	